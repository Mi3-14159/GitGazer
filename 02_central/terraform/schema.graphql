schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Repository @aws_api_key @aws_iam @aws_cognito_user_pools {
    full_name: String!
    name: String!
    html_url: String!
    owner: Owner!
}

type Owner @aws_api_key @aws_iam @aws_cognito_user_pools {
    login: String!
}

input RepositoryInput {
    full_name: String!
    name: String!
    html_url: String!
    owner: OwnerInput!
}

input OwnerInput {
    login: String!
}

type WorkflowJob @aws_api_key @aws_iam @aws_cognito_user_pools {
    id: Float!
    run_id: Float!
    workflow_name: String!
    run_url: String!
    run_attempt: Int!
    status: String!
    conclusion: String
    created_at: AWSDateTime!
    started_at: AWSDateTime!
    completed_at: AWSDateTime
    name: String!
    head_branch: String!
}

input WorkflowJobInput {
    id: Float!
    run_id: Float!
    run_url: String!
    status: String!
    conclusion: String
    name: String!
    workflow_name: String!
    head_branch: String!
    run_attempt: Int!
    created_at: AWSDateTime!
    started_at: AWSDateTime!
    completed_at: AWSDateTime
}

type Sender @aws_api_key @aws_iam @aws_cognito_user_pools {
    login: String!
    type: String!
    id: Float!
}

type WorkflowJobEvent @aws_api_key @aws_iam @aws_cognito_user_pools {
    action: String!
    workflow_job: WorkflowJob!
    repository: Repository!
    sender: Sender!
}

input SenderInput {
    login: String!
    type: String!
    id: Float!
}

input WorkflowJobEventInput {
    action: String!
    workflow_job: WorkflowJobInput!
    repository: RepositoryInput!
    sender: SenderInput!
}

type GitGazerWorkflowJobEvent @aws_api_key @aws_iam @aws_cognito_user_pools {
    integrationId: String!
    job_id: Float!
    created_at: AWSDateTime!
    expire_at: AWSTimestamp!
    workflow_job_event: WorkflowJobEvent!
}

input GitGazerWorkflowJobEventInput {
    integrationId: String!
    job_id: Float!
    created_at: AWSDateTime!
    expire_at: AWSTimestamp!
    workflow_job_event: WorkflowJobEventInput!
}

type GitGazerWorkflowJobEventConnection @aws_api_key @aws_cognito_user_pools {
    items: [GitGazerWorkflowJobEvent!]!
    nextToken: String
}

input GitGazerWorkflowJobEventFilterInput {
    integrationId: String!
    job_id: Float
    expire_at: AWSTimestamp
    created_at: AWSDateTime
}

enum NotificationChannelType {
    HTTP
    SLACK
}

type Http @aws_api_key @aws_cognito_user_pools {
    type: NotificationChannelType!
    body: String!
    headers: String
    method: String!
    query_parameters: String
    url: String!
}

type Slack @aws_api_key @aws_cognito_user_pools {
    type: NotificationChannelType!
    webhook_url: String!
}

union NotificationRuleChannel = Http | Slack

type NotificationRule @aws_api_key @aws_cognito_user_pools {
    id: String!
    integrationId: String!
    owner: String!
    repository_name: String
    workflow_name: String
    head_branch: String
    enabled: Boolean!
    created_at: AWSDateTime!
    updated_at: AWSDateTime!
    channels: [Slack]!
}

input NotificationChannelInput {
    # Common field to discriminate between types
    type: NotificationChannelType!
    # Http specific fields
    body: String
    headers: String
    method: String
    query_parameters: String
    url: String
    # Slack specific fields
    webhook_url: String
}

input NotificationRuleInput {
    integrationId: String!
    owner: String!
    repository_name: String
    workflow_name: String
    head_branch: String
    enabled: Boolean!
    channels: [NotificationChannelInput]!
}

type NotificationRuleConnection @aws_api_key @aws_cognito_user_pools {
    items: [NotificationRule]!
    nextToken: String
}

type Integration @aws_api_key @aws_cognito_user_pools {
    id: String!
    label: String!
    secret: String!
    owner: String!
    users: [String]!
}

input IntegrationInput {
    id: String
    secret: String
    label: String!
    users: [String]
}

type Mutation @aws_api_key @aws_cognito_user_pools {
    putJob(input: GitGazerWorkflowJobEventInput!): GitGazerWorkflowJobEvent @aws_api_key @aws_iam
    putNotificationRule(input: NotificationRuleInput!): NotificationRule
    putIntegration(input: IntegrationInput): Integration
    deleteIntegration(id: String!): Boolean
    deleteNotificationRule(integrationId: String!, id: String!): Boolean
}

type Query @aws_api_key @aws_cognito_user_pools {
    listJobs(filter: GitGazerWorkflowJobEventFilterInput!, limit: Int, nextToken: String): GitGazerWorkflowJobEventConnection
    listNotificationRules(nextToken: String): NotificationRuleConnection
    listIntegrations: [Integration]!
}

type Subscription @aws_api_key @aws_cognito_user_pools {
    onPutJob: GitGazerWorkflowJobEvent @aws_subscribe(mutations: ["putJob"])
}
