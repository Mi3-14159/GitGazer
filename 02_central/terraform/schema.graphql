type Sender @aws_api_key @aws_iam @aws_cognito_user_pools {
  login: String!
  id: Float!
  node_id: String!
  avatar_url: String!
  gravatar_id: String!
  url: String!
  html_url: String!
  followers_url: String!
  following_url: String!
  gists_url: String!
  starred_url: String!
  subscriptions_url: String!
  organizations_url: String
  repos_url: String!
  events_url: String!
  received_events_url: String!
  type: String!
  site_admin: Boolean!
}

input SenderInput {
  login: String!
  id: Float!
  node_id: String!
  avatar_url: String!
  gravatar_id: String!
  url: String!
  html_url: String!
  followers_url: String!
  following_url: String!
  gists_url: String!
  starred_url: String!
  subscriptions_url: String!
  organizations_url: String
  repos_url: String!
  events_url: String!
  received_events_url: String!
  type: String!
  site_admin: Boolean!
}

type Organization @aws_api_key @aws_iam @aws_cognito_user_pools {
  login: String!
  id: Float!
  node_id: String!
  url: String!
  repos_url: String!
  events_url: String!
  hooks_url: String!
  issues_url: String!
  members_url: String!
  public_members_url: String!
  avatar_url: String!
  description: String
}

input OrganizationInput {
  login: String!
  id: Float!
  node_id: String!
  url: String!
  repos_url: String!
  events_url: String!
  hooks_url: String!
  issues_url: String!
  members_url: String!
  public_members_url: String!
  avatar_url: String!
  description: String
}

type Owner @aws_api_key @aws_iam @aws_cognito_user_pools {
  login: String!
  id: Float!
  node_id: String!
  avatar_url: String!
  gravatar_id: String!
  url: String!
  html_url: String!
  followers_url: String!
  following_url: String!
  gists_url: String!
  starred_url: String!
  subscriptions_url: String!
  organizations_url: String
  repos_url: String!
  events_url: String!
  received_events_url: String!
  type: String!
  site_admin: Boolean!
}

input OwnerInput {
  login: String!
  id: Float!
  node_id: String!
  avatar_url: String!
  gravatar_id: String!
  url: String!
  html_url: String!
  followers_url: String!
  following_url: String!
  gists_url: String!
  starred_url: String!
  subscriptions_url: String!
  organizations_url: String
  repos_url: String!
  events_url: String!
  received_events_url: String!
  type: String!
  site_admin: Boolean!
}

type Repository @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: Float!
  node_id: String!
  name: String!
  full_name: String!
  private: Boolean!
  html_url: String!
  description: String
  fork: Boolean!
  url: String!
  forks_url: String!
  keys_url: String!
  collaborators_url: String!
  teams_url: String!
  hooks_url: String!
  issue_events_url: String!
  events_url: String!
  assignees_url: String!
  branches_url: String!
  tags_url: String!
  blobs_url: String!
  git_tags_url: String!
  git_refs_url: String!
  trees_url: String!
  statuses_url: String!
  languages_url: String!
  stargazers_url: String!
  contributors_url: String!
  subscribers_url: String!
  subscription_url: String!
  commits_url: String!
  git_commits_url: String!
  comments_url: String!
  issue_comment_url: String!
  contents_url: String!
  compare_url: String!
  merges_url: String!
  archive_url: String!
  downloads_url: String!
  issues_url: String!
  pulls_url: String!
  milestones_url: String!
  notifications_url: String!
  labels_url: String!
  releases_url: String!
  deployments_url: String!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  pushed_at: AWSDateTime!
  git_url: String!
  ssh_url: String!
  clone_url: String!
  svn_url: String!
  homepage: String
  size: Int!
  stargazers_count: Int!
  watchers_count: Int!
  language: String
  has_issues: Boolean!
  has_projects: Boolean!
  has_downloads: Boolean!
  has_wiki: Boolean!
  has_pages: Boolean!
  has_discussions: Boolean!
  forks_count: Int!
  mirror_url: String
  archived: Boolean!
  disabled: Boolean!
  open_issues_count: Int!
  license: String
  allow_forking: Boolean!
  is_template: Boolean!
  web_commit_signoff_required: Boolean!
  visibility: String!
  forks: Int!
  open_issues: Int!
  watchers: Int!
  default_branch: String!
  topics: [String]
  owner: Owner!
}

input RepositoryInput {
  id: Float!
  node_id: String!
  name: String!
  full_name: String!
  private: Boolean!
  html_url: String!
  description: String
  fork: Boolean!
  url: String!
  forks_url: String!
  keys_url: String!
  collaborators_url: String!
  teams_url: String!
  hooks_url: String!
  issue_events_url: String!
  events_url: String!
  assignees_url: String!
  branches_url: String!
  tags_url: String!
  blobs_url: String!
  git_tags_url: String!
  git_refs_url: String!
  trees_url: String!
  statuses_url: String!
  languages_url: String!
  stargazers_url: String!
  contributors_url: String!
  subscribers_url: String!
  subscription_url: String!
  commits_url: String!
  git_commits_url: String!
  comments_url: String!
  issue_comment_url: String!
  contents_url: String!
  compare_url: String!
  merges_url: String!
  archive_url: String!
  downloads_url: String!
  issues_url: String!
  pulls_url: String!
  milestones_url: String!
  notifications_url: String!
  labels_url: String!
  releases_url: String!
  deployments_url: String!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  pushed_at: AWSDateTime!
  git_url: String!
  ssh_url: String!
  clone_url: String!
  svn_url: String!
  homepage: String
  size: Int!
  stargazers_count: Int!
  watchers_count: Int!
  language: String
  has_issues: Boolean!
  has_projects: Boolean!
  has_downloads: Boolean!
  has_wiki: Boolean!
  has_pages: Boolean!
  has_discussions: Boolean!
  forks_count: Int!
  mirror_url: String
  archived: Boolean!
  disabled: Boolean!
  open_issues_count: Int!
  license: String
  allow_forking: Boolean!
  is_template: Boolean!
  web_commit_signoff_required: Boolean!
  visibility: String!
  forks: Int!
  open_issues: Int!
  watchers: Int!
  default_branch: String!
  topics: [String]
  owner: OwnerInput!
}

type Steps @aws_api_key @aws_iam @aws_cognito_user_pools {
  name: String!
  status: String!
  conclusion: String
  number: Int!
  started_at: AWSDateTime!
  completed_at: AWSDateTime!
}

input StepsInput {
  name: String!
  status: String!
  conclusion: String
  number: Int!
  started_at: AWSDateTime!
  completed_at: AWSDateTime!
}

type WorkflowJob @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: Float!
  run_id: Float!
  workflow_name: String!
  head_branch: String!
  run_url: String!
  run_attempt: Int!
  node_id: String!
  head_sha: String!
  url: String!
  html_url: String!
  status: String!
  conclusion: String
  created_at: AWSDateTime!
  started_at: AWSDateTime!
  completed_at: AWSDateTime
  name: String!
  check_run_url: String!
  runner_id: Int
  runner_name: String
  runner_group_id: Int
  runner_group_name: String
  labels: [String]
  steps: [Steps]
}

input WorkflowJobInput {
  id: Float!
  run_id: Float!
  workflow_name: String!
  head_branch: String!
  run_url: String!
  run_attempt: Int!
  node_id: String!
  head_sha: String!
  url: String!
  html_url: String!
  status: String!
  conclusion: String
  created_at: AWSDateTime!
  started_at: AWSDateTime!
  completed_at: AWSDateTime
  name: String!
  check_run_url: String!
  runner_id: Int
  runner_name: String
  runner_group_id: Int
  runner_group_name: String
  labels: [String]
  steps: [StepsInput]
}

type Job @aws_api_key @aws_iam @aws_cognito_user_pools {
  run_id: Float!
  workflow_name: String!
  expire_at: AWSDateTime!
  action: String!
  integrationId: String!
  sender: Sender!
  organization: Organization
  repository: Repository!
  workflow_job: WorkflowJob!
}

input PutJobInput {
  run_id: Float!
  workflow_name: String!
  expire_at: AWSDateTime!
  action: String!
  integrationId: String!
  sender: SenderInput!
  organization: OrganizationInput
  repository: RepositoryInput!
  workflow_job: WorkflowJobInput!
}

type JobConnection @aws_api_key @aws_cognito_user_pools {
  items: [Job]
  nextToken: String
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input JobFilterInput {
  runId: TableStringFilterInput
  workflowName: TableStringFilterInput
  completedAt: TableStringFilterInput
  conclusion: TableStringFilterInput
  createdAt: TableStringFilterInput
  htmlUrl: TableStringFilterInput
  owner: TableStringFilterInput
  repositoryName: TableStringFilterInput
  runAttempt: TableStringFilterInput
  startedAt: TableStringFilterInput
  status: TableStringFilterInput
  expireAt: TableStringFilterInput
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  size: ModelSizeInput
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  size: ModelSizeInput
}

type Http @aws_api_key @aws_cognito_user_pools {
  body: String!
  headers: String
  method: String!
  query_parameters: String
  url: String!
}

input HttpInput {
  body: String!
  headers: String
  method: String!
  query_parameters: String
  url: String!
}

type NotificationRule @aws_api_key @aws_cognito_user_pools {
  integrationId: String!
  owner: String!
  repository_name: String
  workflow_name: String
  enabled: Boolean!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  http: Http
}

input NotificationRuleInput {
  owner: String!
  repository_name: String
  workflow_name: String
  enabled: Boolean!
  http: HttpInput
}

type NotificationRuleConnection @aws_api_key @aws_cognito_user_pools {
  items: [NotificationRule]
  nextToken: String
}

type Integration @aws_api_key @aws_cognito_user_pools {
  id: String!
  secret: String!
  users: [String]!
}

type Mutation @aws_api_key @aws_cognito_user_pools {
  putJob(input: PutJobInput!): Job @aws_api_key @aws_iam
  putNotificationRule(input: NotificationRuleInput!): NotificationRule
}

type Query @aws_api_key @aws_cognito_user_pools {
  getJob(run_id: Float!, workflow_name: String!): Job
  listJobs(filter: JobFilterInput, limit: Int, nextToken: String): JobConnection
  listNotificationRules(nextToken: String): NotificationRuleConnection
  listIntegrations: [Integration]!
}

type Subscription @aws_api_key @aws_cognito_user_pools {
  onPutJob(run_id: Float, workflow_name: String, createdAt: AWSDateTime): Job
    @aws_subscribe(mutations: ["putJob"])
}
