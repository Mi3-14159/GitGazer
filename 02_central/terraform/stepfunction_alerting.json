{
  "Comment": "The GitGazer notifications state machine",
  "StartAt": "Create IDs list",
  "States": {
    "Create IDs list": {
      "InputPath": "$[0]",
      "Next": "Process IDs list",
      "Parameters": {
        "conclusion.$": "$.dynamodb.NewImage.workflow_job_event.M.workflow_job.M.conclusion.S",
        "ids.$": "States.Array('*', States.Format('{}', $.dynamodb.NewImage.workflow_job_event.M.repository.M.owner.M.login.S), States.Format('{}/{}', $.dynamodb.NewImage.workflow_job_event.M.repository.M.owner.M.login.S, $.dynamodb.NewImage.workflow_job_event.M.repository.M.name.S), States.Format('{}/{}/{}', $.dynamodb.NewImage.workflow_job_event.M.repository.M.owner.M.login.S, $.dynamodb.NewImage.workflow_job_event.M.repository.M.name.S, $.dynamodb.NewImage.workflow_job_event.M.workflow_job.M.workflow_name.S))",
        "integrationId.$": "$.dynamodb.NewImage.integrationId.S",
        "workflow_name.$": "$.dynamodb.NewImage.workflow_job_event.M.workflow_job.M.workflow_name.S"
      },
      "Type": "Pass"
    },
    "Process IDs list": {
      "End": true,
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get notification rule",
        "States": {
          "Check if array of notification channels is present": {
            "Choices": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.Item.channels"
                  }
                ],
                "Next": "Iterate notification channels"
              }
            ],
            "Default": "No notification channels defined",
            "Type": "Choice"
          },
          "Get notification rule": {
            "Next": "Check if array of notification channels is present",
            "Parameters": {
              "Key": {
                "id": {
                  "S.$": "$.id"
                },
                "integrationId": {
                  "S.$": "$.integrationId"
                }
              },
              "TableName": "${notification_rules_table_name}"
            },
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Type": "Task"
          },
          "Iterate notification channels": {
            "End": true,
            "ItemProcessor": {
              "ProcessorConfig": {
                "Mode": "INLINE"
              },
              "StartAt": "Choice",
              "States": {
                "Call Slack": {
                  "End": true,
                  "Parameters": {
                    "ApiEndpoint.$": "$.M.webhook_url.S",
                    "InvocationConfig": {
                      "ConnectionArn": "${aws_cloudwatch_event_connection_generic_arn}"
                    },
                    "Method": "POST",
                    "RequestBody": {
                      "attachments": [
                        {
                          "blocks": [
                            {
                              "text": {
                                "emoji": true,
                                "text.$": "States.Format('{} - {}', $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.workflow_job.M.workflow_name.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.workflow_job.M.conclusion.S)",
                                "type": "plain_text"
                              },
                              "type": "header"
                            },
                            {
                              "fields": [
                                {
                                  "text.$": "States.Format('*Organisation:* <http://github.com/{}|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.repository.M.owner.M.login.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.repository.M.owner.M.login.S)",
                                  "type": "mrkdwn"
                                },
                                {
                                  "text.$": "States.Format('*Repository:* <{}|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.repository.M.html_url.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.repository.M.name.S)",
                                  "type": "mrkdwn"
                                },
                                {
                                  "text.$": "States.Format('*Workflow:* <{}/actions/runs/{}/workflow|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.repository.M.html_url.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.workflow_job.M.run_id.N, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.workflow_job.M.workflow_name.S)",
                                  "type": "mrkdwn"
                                },
                                {
                                  "text.$": "States.Format('*Conclusion:* <{}/actions/runs/{}|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.repository.M.html_url.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.workflow_job.M.run_id.N, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.workflow_job.M.conclusion.S)",
                                  "type": "mrkdwn"
                                },
                                {
                                  "text.$": "States.Format('*Sender:* <https://github.com/{}|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.sender.M.login.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.sender.M.login.S)",
                                  "type": "mrkdwn"
                                }
                              ],
                              "type": "section"
                            }
                          ],
                          "color": "#e01e5a"
                        }
                      ]
                    }
                  },
                  "Resource": "arn:aws:states:::http:invoke",
                  "Retry": [
                    {
                      "BackoffRate": 2,
                      "ErrorEquals": ["States.ALL"],
                      "IntervalSeconds": 1,
                      "JitterStrategy": "FULL",
                      "MaxAttempts": 3
                    }
                  ],
                  "Type": "Task"
                },
                "Call third-party API": {
                  "End": true,
                  "Parameters": {
                    "ApiEndpoint.$": "$.M.url.S",
                    "Authentication": {
                      "ConnectionArn": "${aws_cloudwatch_event_connection_generic_arn}"
                    },
                    "Method.$": "$.M.method.S",
                    "RequestBody": {
                      "text.$": "States.Format($.M.body.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.workflow_job.M.workflow_name.S)"
                    }
                  },
                  "Resource": "arn:aws:states:::http:invoke",
                  "Retry": [
                    {
                      "BackoffRate": 2,
                      "ErrorEquals": ["States.ALL"],
                      "IntervalSeconds": 1,
                      "JitterStrategy": "FULL",
                      "MaxAttempts": 3
                    }
                  ],
                  "Type": "Task"
                },
                "Choice": {
                  "Choices": [
                    {
                      "And": [
                        {
                          "StringEquals": "HTTP",
                          "Variable": "$.M.type.S"
                        },
                        {
                          "IsPresent": true,
                          "Variable": "$.M.body.S"
                        },
                        {
                          "IsPresent": true,
                          "Variable": "$.M.method.S"
                        },
                        {
                          "IsPresent": true,
                          "Variable": "$.M.url.S"
                        }
                      ],
                      "Next": "Call third-party API"
                    },
                    {
                      "And": [
                        {
                          "StringEquals": "SLACK",
                          "Variable": "$.M.type.S"
                        },
                        {
                          "IsPresent": true,
                          "Variable": "$.M.webhook_url.S"
                        }
                      ],
                      "Next": "Call Slack"
                    }
                  ],
                  "Default": "Not yet implemented",
                  "Type": "Choice"
                },
                "Not yet implemented": {
                  "Comment": "Sink for not yet implemented notification methods",
                  "Type": "Succeed"
                }
              }
            },
            "ItemsPath": "$.Item.channels.L",
            "Type": "Map"
          },
          "No notification channels defined": {
            "Type": "Succeed"
          }
        }
      },
      "ItemSelector": {
        "id.$": "$$.Map.Item.Value",
        "integrationId.$": "$.integrationId"
      },
      "ItemsPath": "$.ids",
      "Type": "Map"
    }
  }
}
