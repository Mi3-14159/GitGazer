{
  "Comment": "The GitGazer notifications state machine",
  "StartAt": "Create IDs list",
  "States": {
    "Create IDs list": {
      "InputPath": "$[0]",
      "Next": "Process IDs list",
      "Parameters": {
        "conclusion.$": "$.dynamodb.NewImage.workflow_job_event.M.workflow_job.M.conclusion.S",
        "ids.$": "States.Array(States.Format('{}', $.dynamodb.NewImage.workflow_job_event.M.repository.M.owner.M.login.S), States.Format('{}/{}', $.dynamodb.NewImage.workflow_job_event.M.repository.M.owner.M.login.S, $.dynamodb.NewImage.workflow_job_event.M.repository.M.full_name.S), States.Format('{}/{}/{}', $.dynamodb.NewImage.workflow_job_event.M.repository.M.owner.M.login.S, $.dynamodb.NewImage.workflow_job_event.M.repository.M.full_name.S, $.dynamodb.NewImage.workflow_job_event.M.workflow_job.M.workflow_name.S))",
        "integrationId.$": "$.dynamodb.NewImage.integrationId.S",
        "workflow_name.$": "$.dynamodb.NewImage.workflow_job_event.M.workflow_job.M.workflow_name.S"
      },
      "Type": "Pass"
    },
    "Process IDs list": {
      "End": true,
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get notification rule",
        "States": {
          "Call third-party API": {
            "End": true,
            "Parameters": {
              "ApiEndpoint.$": "$.Item.http.M.url.S",
              "Authentication": {
                "ConnectionArn": "${aws_cloudwatch_event_connection_generic_arn}"
              },
              "Method.$": "$.Item.http.M.method.S",
              "RequestBody": {
                "text.$": "States.Format($.Item.http.M.body.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_job_event.M.workflow_job.M.workflow_name.S)"
              }
            },
            "Resource": "arn:aws:states:::http:invoke",
            "Retry": [
              {
                "BackoffRate": 2,
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 1,
                "JitterStrategy": "FULL",
                "MaxAttempts": 3
              }
            ],
            "Type": "Task"
          },
          "Choose notification type": {
            "Choices": [
              {
                "Next": "No notification rule",
                "Not": {
                  "IsPresent": true,
                  "Variable": "$.Item"
                }
              },
              {
                "IsPresent": true,
                "Next": "Call third-party API",
                "Variable": "$.Item.http"
              }
            ],
            "Default": "Not yet implemented",
            "Type": "Choice"
          },
          "Get notification rule": {
            "Next": "Choose notification type",
            "Parameters": {
              "Key": {
                "id": {
                  "S.$": "$.id"
                },
                "integrationId": {
                  "S.$": "$.integrationId"
                }
              },
              "TableName": "${notification_rules_table_name}"
            },
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Type": "Task"
          },
          "No notification rule": {
            "Type": "Succeed"
          },
          "Not yet implemented": {
            "Comment": "Sink for not yet implemented notification methods",
            "Type": "Succeed"
          }
        }
      },
      "ItemSelector": {
        "id.$": "$$.Map.Item.Value",
        "integrationId.$": "$.integrationId"
      },
      "ItemsPath": "$.ids",
      "Type": "Map"
    }
  }
}
