{
  "Comment": "The GitGazer notifications state machine",
  "StartAt": "Iterate all events",
  "States": {
    "Iterate all events": {
      "End": true,
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Parallel",
        "States": {
          "Parallel": {
            "Branches": [
              {
                "StartAt": "Query notification rule",
                "States": {
                  "Query notification rule": {
                    "End": true,
                    "Parameters": {
                      "ExpressionAttributeNames": {
                        "#BR": "head_branch",
                        "#O": "owner",
                        "#R": "rule",
                        "#REPO": "repository_name",
                        "#WF": "workflow_name",
                        "#enabled": "enabled",
                        "#ignoreDependabot": "ignore_dependabot",
                        "#integrationId": "integrationId"
                      },
                      "ExpressionAttributeValues": {
                        ":br": {
                          "S.$": "$.dynamodb.NewImage.workflow_event.M.workflow_job.M.head_branch.S"
                        },
                        ":dependabotUser": {
                          "S": "dependabot[bot]"
                        },
                        ":dependabotWorkflow": {
                          "S": "Dependabot"
                        },
                        ":empty": {
                          "S": ""
                        },
                        ":enabled": {
                          "Bool": true
                        },
                        ":ignoreDependabotFalse": {
                          "Bool": false
                        },
                        ":integrationId": {
                          "S.$": "$.dynamodb.NewImage.integrationId.S"
                        },
                        ":owner": {
                          "S.$": "$.dynamodb.NewImage.workflow_event.M.repository.M.owner.M.login.S"
                        },
                        ":repo": {
                          "S.$": "$.dynamodb.NewImage.workflow_event.M.repository.M.name.S"
                        },
                        ":sender": {
                          "S.$": "$.dynamodb.NewImage.workflow_event.M.sender.M.login.S"
                        },
                        ":star": {
                          "S": "*"
                        },
                        ":wf": {
                          "S.$": "$.dynamodb.NewImage.workflow_event.M.workflow_job.M.workflow_name.S"
                        },
                        ":wf_name": {
                          "S.$": "$.dynamodb.NewImage.workflow_event.M.workflow_job.M.name.S"
                        }
                      },
                      "FilterExpression": "#enabled = :enabled AND (#R.#O = :owner OR #R.#O = :star OR #R.#O = :empty) AND (#R.#REPO = :repo OR #R.#REPO = :star OR #R.#REPO = :empty) AND (#R.#WF = :wf OR #R.#WF = :star OR #R.#WF = :empty) AND (#R.#BR = :br OR #R.#BR = :star OR #R.#BR = :empty) AND (attribute_not_exists(#ignoreDependabot) OR #ignoreDependabot = :ignoreDependabotFalse OR (:sender <> :dependabotUser AND :wf_name <> :dependabotWorkflow))",
                      "IndexName": "${notification_rules_table_index_name}",
                      "KeyConditionExpression": "#integrationId = :integrationId",
                      "Select": "ALL_ATTRIBUTES",
                      "TableName": "${notification_rules_table_name}"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
                    "Type": "Task"
                  }
                }
              },
              {
                "StartAt": "Get workflow run",
                "States": {
                  "Get workflow run": {
                    "End": true,
                    "Parameters": {
                      "Key": {
                        "id": {
                          "S.$": "$.dynamodb.NewImage.workflow_event.M.workflow_job.M.run_id.N"
                        },
                        "integrationId": {
                          "S.$": "$.dynamodb.NewImage.integrationId.S"
                        }
                      },
                      "TableName": "${jobs_table_name}"
                    },
                    "Resource": "arn:aws:states:::dynamodb:getItem",
                    "Type": "Task"
                  }
                }
              }
            ],
            "Next": "Process notification rules",
            "Type": "Parallel"
          },
          "Process notification rules": {
            "End": true,
            "ItemProcessor": {
              "ProcessorConfig": {
                "Mode": "INLINE"
              },
              "StartAt": "Check if array of notification channels is present and rule is enabled",
              "States": {
                "Check if array of notification channels is present and rule is enabled": {
                  "Choices": [
                    {
                      "And": [
                        {
                          "IsPresent": true,
                          "Variable": "$.rule"
                        },
                        {
                          "IsPresent": true,
                          "Variable": "$.rule.channels"
                        }
                      ],
                      "Next": "Iterate notification channels"
                    }
                  ],
                  "Default": "No notification channels defined",
                  "Type": "Choice"
                },
                "Iterate notification channels": {
                  "End": true,
                  "ItemProcessor": {
                    "ProcessorConfig": {
                      "Mode": "INLINE"
                    },
                    "StartAt": "Choice",
                    "States": {
                      "Call Slack": {
                        "End": true,
                        "Parameters": {
                          "ApiEndpoint.$": "$.channel.M.webhook_url.S",
                          "InvocationConfig": {
                            "ConnectionArn": "${aws_cloudwatch_event_connection_generic_arn}"
                          },
                          "Method": "POST",
                          "RequestBody": {
                            "attachments": [
                              {
                                "blocks": [
                                  {
                                    "text": {
                                      "emoji": true,
                                      "text.$": "States.Format('{} - {}', $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.workflow_job.M.workflow_name.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.workflow_job.M.conclusion.S)",
                                      "type": "plain_text"
                                    },
                                    "type": "header"
                                  },
                                  {
                                    "fields": [
                                      {
                                        "text.$": "States.Format('*Organisation:* <http://github.com/{}|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.repository.M.owner.M.login.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.repository.M.owner.M.login.S)",
                                        "type": "mrkdwn"
                                      },
                                      {
                                        "text.$": "States.Format('*Repository:* <{}|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.repository.M.html_url.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.repository.M.name.S)",
                                        "type": "mrkdwn"
                                      },
                                      {
                                        "text.$": "States.Format('*Workflow:* <{}/actions/runs/{}/workflow|{} / {}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.repository.M.html_url.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.workflow_job.M.run_id.N, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.workflow_job.M.workflow_name.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.workflow_job.M.name.S)",
                                        "type": "mrkdwn"
                                      },
                                      {
                                        "text.$": "States.Format('*Conclusion:* <{}/actions/runs/{}|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.repository.M.html_url.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.workflow_job.M.run_id.N, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.workflow_job.M.conclusion.S)",
                                        "type": "mrkdwn"
                                      },
                                      {
                                        "text.$": "States.Format('*Event:* {}', $.workflow_run.workflow_event.M.workflow_run.M.event.S)",
                                        "type": "mrkdwn"
                                      },
                                      {
                                        "text.$": "States.Format('*Sender:* <https://github.com/{}|{}>', $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.sender.M.login.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.sender.M.login.S)",
                                        "type": "mrkdwn"
                                      }
                                    ],
                                    "type": "section"
                                  }
                                ],
                                "color": "#e01e5a"
                              }
                            ]
                          }
                        },
                        "Resource": "arn:aws:states:::http:invoke",
                        "Retry": [
                          {
                            "BackoffRate": 2,
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 1,
                            "JitterStrategy": "FULL",
                            "MaxAttempts": 3
                          }
                        ],
                        "Type": "Task"
                      },
                      "Call third-party API": {
                        "End": true,
                        "Parameters": {
                          "ApiEndpoint.$": "$.channel.M.url.S",
                          "Authentication": {
                            "ConnectionArn": "${aws_cloudwatch_event_connection_generic_arn}"
                          },
                          "Method.$": "$.channel.M.method.S",
                          "RequestBody": {
                            "text.$": "States.Format($.channel.M.body.S, $$.Execution.Input[0].dynamodb.NewImage.workflow_event.M.workflow_job.M.workflow_name.S)"
                          }
                        },
                        "Resource": "arn:aws:states:::http:invoke",
                        "Retry": [
                          {
                            "BackoffRate": 2,
                            "ErrorEquals": ["States.ALL"],
                            "IntervalSeconds": 1,
                            "JitterStrategy": "FULL",
                            "MaxAttempts": 3
                          }
                        ],
                        "Type": "Task"
                      },
                      "Choice": {
                        "Choices": [
                          {
                            "And": [
                              {
                                "StringEquals": "HTTP",
                                "Variable": "$.channel.M.type.S"
                              },
                              {
                                "IsPresent": true,
                                "Variable": "$.channel.M.body.S"
                              },
                              {
                                "IsPresent": true,
                                "Variable": "$.channel.M.method.S"
                              },
                              {
                                "IsPresent": true,
                                "Variable": "$.channel.M.url.S"
                              }
                            ],
                            "Next": "Call third-party API"
                          },
                          {
                            "And": [
                              {
                                "StringEquals": "SLACK",
                                "Variable": "$.channel.M.type.S"
                              },
                              {
                                "IsPresent": true,
                                "Variable": "$.channel.M.webhook_url.S"
                              }
                            ],
                            "Next": "Call Slack"
                          }
                        ],
                        "Default": "Not yet implemented",
                        "Type": "Choice"
                      },
                      "Not yet implemented": {
                        "Comment": "Sink for not yet implemented notification methods",
                        "Type": "Succeed"
                      }
                    }
                  },
                  "ItemSelector": {
                    "channel.$": "$$.Map.Item.Value",
                    "workflow_run.$": "$.workflow_run"
                  },
                  "ItemsPath": "$.rule.channels.L",
                  "Type": "Map"
                },
                "No notification channels defined": {
                  "Type": "Succeed"
                }
              }
            },
            "ItemSelector": {
              "rule.$": "$$.Map.Item.Value",
              "workflow_run.$": "$[1].Item"
            },
            "ItemsPath": "$[0].Items",
            "Type": "Map"
          }
        }
      },
      "Type": "Map"
    }
  }
}
